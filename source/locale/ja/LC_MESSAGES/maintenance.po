# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 21:53+0300\n"
"PO-Revision-Date: 2015-05-24 19:18+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/git-extensions-manual/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ..\maintenance.rst:2
msgid "Maintenance"
msgstr ""

#: ..\maintenance.rst:4
msgid ""
"In this chapter some of the functions to maintain a repository are "
"discussed."
msgstr ""

#: ..\maintenance.rst:7
msgid "Compress Git database"
msgstr ""

#: ..\maintenance.rst:9
msgid ""
"Git will create a lot of files. You can run the ``Compress git database`` to"
" pack all small files building up a repository into one big file. Git will "
"also garbage collect all unused objects that are older then 15 days. When a "
"database is fragmented into a many small files compressing the database can "
"increase performance."
msgstr ""

#: ..\maintenance.rst:16
msgid "Recover lost objects"
msgstr ""

#: ..\maintenance.rst:18
msgid ""
"If you accidently deleted a commit you can try to recover it using the "
"``Recover lost objects`` function. A dialog will show you all dangling "
"objects and will allow you to review and recover them."
msgstr ""

#: ..\maintenance.rst:23
msgid ""
"Normally Git will not delete files right away when you remove something from"
" your repository. The reason for this is that you can restore deleted items "
"if you need to. Git will delete removed items when they are older then 15 "
"days and you run ``Compress git database``."
msgstr ""

#: ..\maintenance.rst:29
msgid ""
"There are several functions to help you find the lost items. By default Git "
"Extensions will only show commits. To show all items, just uncheck the "
"``Show only commits`` option. The other options can be checked/unchecked to "
"get more/less results. Double-click on on item to view the content. When you"
" located the item you want to recover you can tag it using the ``Tag "
"selected object`` button."
msgstr ""

#: ..\maintenance.rst:34
msgid ""
"Git Extensions also is able to tag all lost objects. Doing this will make "
"all lost objects visible again making it very easy to locate the commit(s) "
"you would like to recover. After recovering a commit using the ``Tag all "
"lost commits`` button, you can remove all tags using the ``Delete all "
"LOST_AND_FOUND tags`` button."
msgstr ""

#: ..\maintenance.rst:41
msgid "Fix user names"
msgstr ""

#: ..\maintenance.rst:43
msgid ""
"When someone accidentally committed using a wrong username this can be fixed"
" using the ``Edit .mailmap`` function. Git will use the username for an "
"email address when it is set in the ``.mailmap`` file."
msgstr ""

#: ..\maintenance.rst:48
msgid "Fix user name using commit email:"
msgstr ""

#: ..\maintenance.rst:54
msgid "Fix email address using commit email:"
msgstr ""

#: ..\maintenance.rst:60
msgid "Fix email address and name using commit email:"
msgstr ""

#: ..\maintenance.rst:66
msgid "Fix email address and name using commit name and email:"
msgstr ""

#: ..\maintenance.rst:73
msgid "Ignore files"
msgstr ""

#: ..\maintenance.rst:75
msgid ""
"Git will track all files that are in the working directory. Normally you do "
"not want to exclude all files that are created by the compiler. You can add "
"files that should be ignored to the .gitignore file. You can use wildcards "
"and regular expressions. All entries are case sensitive. The button ``Add "
"default ignores`` will add files that should be ignored when using Visual "
"Studio."
msgstr ""

#: ..\maintenance.rst:81
msgid "A short overview of the syntax:"
msgstr ""

#: ..\maintenance.rst:84
msgid "#"
msgstr ""

#: ..\maintenance.rst:84
msgid "Lines started with ``#`` are handled as comments"
msgstr ""

#: ..\maintenance.rst:86
msgid "!"
msgstr ""

#: ..\maintenance.rst:86
msgid "Lines started with ``!`` are exclude patterns"
msgstr ""

#: ..\maintenance.rst:88
msgid "[Dd]"
msgstr ""

#: ..\maintenance.rst:88
msgid "Characters inside ``[..]`` means that 1 of the characters must match"
msgstr ""

#: ..\maintenance.rst:90
msgid "\\*"
msgstr ""

#: ..\maintenance.rst:90
msgid "Wildcard"
msgstr ""

#: ..\maintenance.rst:92 ..\maintenance.rst:95
msgid "/"
msgstr ""

#: ..\maintenance.rst:92
msgid ""
"A leading slash matches the beginning of the pathname; for example, ``/*.c``"
" matches ``cat-file.c`` but not ``mozilla-sha1/sha1.c``"
msgstr ""

#: ..\maintenance.rst:95
msgid ""
"If the pattern ends with a slash, it is removed for the purpose of the "
"following description, but it would only find a match with a directory. In "
"other words, foo/ will match a directory foo and paths underneath it, but "
"will not match a regular file or a symbolic link foo (this is consistent "
"with the way how pathspec works in general in git)."
msgstr ""

#: ..\maintenance.rst:100
msgid ""
"For more `detailed information "
"<http://www.kernel.org/pub/software/scm/git/docs/gitignore.html>`_."
msgstr ""
