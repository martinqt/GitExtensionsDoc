# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
# Arkady Shapkin <arkadiy_s@inbox.ru>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 21:53+0300\n"
"PO-Revision-Date: 2015-05-24 19:47+0000\n"
"Last-Translator: Arkady Shapkin <arkadiy_s@inbox.ru>\n"
"Language-Team: Russian (http://www.transifex.com/projects/p/git-extensions-manual/language/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ..\branches.rst:2
msgid "Branches"
msgstr "Ветки"

#: ..\branches.rst:7
msgid ""
"Branches are used to commit changes separate from other commits. It is very "
"common to create a new branch when you start working on a feature to keep "
"the work done on that feature separate from other work. When the feature is "
"complete the branch can be merged or rebased as you choose such that the "
"commits for the feature either remain as a parallel branch or appear as a "
"continuous single line of development as if the branch had never existed in "
"the first place. The image on the right illustrates a branch created on top "
"of commit B."
msgstr ""

#: ..\branches.rst:13
msgid ""
"You can see the name of your current branch in a combo box in the toolbar. "
"You can switch to another branch by choosing from the combo box list. In the"
" commit log the current branch has an arrow head to the left of its name. If"
" you are not currently on a branch because you have checked out a specific "
"commit but not any particular branch then Git Extensions will show ``(no "
"branch)`` in place of a branch name in the toolbar. This is called "
"\"Detached HEAD mode\". In Git you can refer to your current branch or "
"commit by the special reference ``HEAD`` in place of the branch name or "
"commit reference."
msgstr ""

#: ..\branches.rst:23
msgid "Create branch"
msgstr ""

#: ..\branches.rst:25
msgid ""
"In Git Extensions there are multiple ways to create a new branch. In the "
"image below I create a new branch from the context menu in the commit log. "
"This will create a new branch on the revision that is selected."
msgstr ""

#: ..\branches.rst:30
msgid ""
"I will create a new branch called ``Refactor``. In this branch I can do "
"whatever I want without affecting others. The default in Git Extensions is "
"to check out a new branch after it is created. If you want to create a new "
"branch but remain on your current branch, uncheck the ``Checkout after "
"create`` checkbox in the ``Create branch`` dialog."
msgstr ""

#: ..\branches.rst:36
msgid ""
"When the branch is created you will see the new branch ``Refactor`` in the "
"commit log. If you chose to checkout this branch the next commit will be "
"committed to the new branch."
msgstr ""

#: ..\branches.rst:41
msgid ""
"Creating branches in Git requires only 41 bytes of space in the repository. "
"Creating a new branch is very easy and fast. The complete work flow of Git "
"is optimized for branching and merging."
msgstr ""

#: ..\branches.rst:45
msgid "Orphan branches"
msgstr ""

#: ..\branches.rst:46
msgid ""
"In special cases it is helpful to have orphan branches (see for example "
"https://www.google.com/search?q=why+use+orphan+branches+in+git). Check the "
"\"Create orphan\" checkbox to create an orphan branch (``--orphan`` option "
"in git)."
msgstr ""

#: ..\branches.rst:49
msgid "The newly created branch will have no parent commits."
msgstr ""

#: ..\branches.rst:51
msgid ""
"The option \"Clear working dir and index\" (``git rm -rf``) is active by "
"default. So the working dir and index will be cleared. If you uncheck the "
"last option then the working dir and index will not be touched."
msgstr ""

#: ..\branches.rst:55
msgid "Checkout branch"
msgstr ""

#: ..\branches.rst:57
msgid ""
"You can switch from the current branch to another branch using the checkout "
"command. Checking out a branch sets the current branch and updates all of "
"the source files in the working directory. Uncommitted changes in the "
"working directory can be overwritten so it is best practice to make sure "
"your working directory is clean by either committing or stashing any current"
" changes before checking out a branch. If you do not clean your working "
"directory then, in the ``Checkout branch`` dialog, you can choose between "
"four options for your local uncommitted changes:"
msgstr ""

#: ..\branches.rst:64
msgid "``Don't change``"
msgstr ""

#: ..\branches.rst:64
msgid ""
"Local changes will be retained if there are not conflicting changes from the"
" branch you are checking out."
msgstr ""

#: ..\branches.rst:66
msgid "``Merge``"
msgstr ""

#: ..\branches.rst:66
msgid ""
"Performs a three-way merge between your current branch, your local changes "
"and the branch you are checking out."
msgstr ""

#: ..\branches.rst:68
msgid "``Stash``"
msgstr ""

#: ..\branches.rst:68
msgid ""
"Your local changes are stashed and the new branch is checked out. You can "
"retrieve your changes on the new branch with stash-pop."
msgstr ""

#: ..\branches.rst:70
msgid "``Reset``"
msgstr ""

#: ..\branches.rst:70
msgid ""
"Your local changes are discarded and the new branch is checked out. Use "
"caution with this option as Git has no record of uncommitted changes so they"
" cannot be retrieved."
msgstr ""

#: ..\branches.rst:76
msgid "Merge branches"
msgstr ""

#: ..\branches.rst:78
msgid ""
"In the image below there are two branches, ``[Refactor]`` and ``[master]``. "
"We can merge the commits from the master branch into the Refactor branch. If"
" we do this, the Refactor branch will be up to date with the master branch, "
"but not the other way around. As long as we are working on the Refactor "
"branch we cannot touch the master branch itself. We can merge the sources of"
" master into our branch, but cannot make any change to the master branch."
msgstr ""

#: ..\branches.rst:85
msgid ""
"To merge the Refactor branch into the master branch, we first need to switch"
" to the master branch."
msgstr ""

#: ..\branches.rst:89
msgid ""
"Once we are on the master branch we can choose merge by choosing ``Merge "
"branches`` from the ``Commands`` menu. In the merge dialog you can verify "
"which branch you are working on. Select the branch to merge with then click "
"the ``Merge`` button."
msgstr ""

#: ..\branches.rst:94
msgid ""
"After the merge the commit log will show the new commit containing the "
"merge. Notice that the Refactor branch is not changed by this merge. If you "
"want to continue working on the Refactor branch you can merge the Refactor "
"branch with master. You can instead delete the Refactor branch if it is not "
"used anymore."
msgstr ""

#: ..\branches.rst:102
msgid ""
"When you need to merge with an unnamed branch you can use a tag to give it a"
" temporary name."
msgstr ""

#: ..\branches.rst:105
msgid "Rebase branch"
msgstr ""

#: ..\branches.rst:107
msgid ""
"The rebase command is the most complex command in Git. The rebase command is"
" very similar to the merge command. Both rebase and merge are used to get a "
"branch up-to-date. The main difference is that rebase can be used to keep "
"the history linear contrary to merges."
msgstr ""

#: ..\branches.rst:113
msgid ""
"A rebase of Refactor on top of master will perform the following actions:"
msgstr ""

#: ..\branches.rst:115
msgid ""
"All commits specific to the Refactor branch will be stashed in a temporary "
"location"
msgstr ""

#: ..\branches.rst:116
msgid "The branch Refactor will be removed"
msgstr ""

#: ..\branches.rst:117
msgid "The branch Refactor will be recreated on the master branch"
msgstr ""

#: ..\branches.rst:118
msgid "All commits will be recommitted in the new Refactor branch"
msgstr ""

#: ..\branches.rst:120
msgid ""
"During a rebase merge conflicts can occur. You need to solve the merge "
"conflicts for each commit that is rebased. The rebase function in Git "
"Extensions will guide you through all steps needed for a successful rebase."
msgstr ""

#: ..\branches.rst:125
msgid ""
"The image below shows the commit log after the rebase. Notice that the "
"history is changed and it seems like the commits on the Refactor branch are "
"created after the commits on the master branch."
msgstr ""

#: ..\branches.rst:132
msgid ""
"Because this function rewrites history you should only use this on branches "
"that are not published to other repositories yet. When you rebase a branch "
"that is already pushed it will be harder to pull or push to that remote. If "
"you want to get a branch up-to-date that is already published you should "
"merge."
msgstr ""

#: ..\branches.rst:137
msgid "Delete branch"
msgstr ""

#: ..\branches.rst:139
msgid ""
"Since it is common to create many branches, it is often necessary to delete "
"branches. Most commonly you will need to delete branches on which work has "
"finished and their contents are merged into master or your main branch. You "
"can also delete unmerged branches when they are not needed anymore and you "
"do not want to keep the work done in that branch."
msgstr ""

#: ..\branches.rst:143
msgid ""
"When you delete a branch that is not yet merged, all of the commits that are"
" in only the deleted branch will be lost. When you delete a branch that is "
"already merged with another branch, the merged commits will not be lost "
"because they are also part of another branch."
msgstr ""

#: ..\branches.rst:147
msgid ""
"You can delete a branch using ``Delete branch`` from the ``Commands`` menu. "
"If you want to delete a branch that is not merged into your current branch "
"(``HEAD`` in Git), you need to check the ``Force delete`` checkbox."
msgstr ""
