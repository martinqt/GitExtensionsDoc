# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 21:53+0300\n"
"PO-Revision-Date: 2015-05-24 19:19+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/projects/p/git-extensions-manual/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ..\remote_feature.rst:2
msgid "Remote feature"
msgstr ""

#: ..\remote_feature.rst:4
msgid ""
"Git is a distributed source control management system. This means that all "
"changes you make are local. When you commit changes, you only commit them to"
" your local repository. To publish your local changes you need to push. In "
"order to get changes committed by others, you need to pull."
msgstr ""

#: ..\remote_feature.rst:9
msgid "Manage remote repositories"
msgstr ""

#: ..\remote_feature.rst:11
msgid "You can manage the remote repositories in the ``Remotes`` menu."
msgstr ""

#: ..\remote_feature.rst:15
msgid ""
"When you cloned your repository from a public repository, this remote is "
"already configured. You can rename each remote for easy recognition. The "
"default name after cloning a remote is ``origin``. If you use PuTTY as SSH "
"client you can also enter the private key file for each remote. Git "
"Extensions will load the key when needed. How to create a private key file "
"is described in the next paragraph."
msgstr ""

#: ..\remote_feature.rst:22
msgid ""
"In the ``Default pull behaviour`` tab you can configure the branches that "
"need to be pulled and merged by default. If you configure this correctly you"
" will not need to choose a branch when you pull or push. There are two "
"buttons on this dialog:"
msgstr ""

#: ..\remote_feature.rst:26
msgid "Prune remote branches"
msgstr ""

#: ..\remote_feature.rst:26
msgid "Throw away remote branches that do not exist on the remote anymore."
msgstr ""

#: ..\remote_feature.rst:28
msgid "Update all remote branch info"
msgstr ""

#: ..\remote_feature.rst:28
msgid "Fetch all remote branch information."
msgstr ""

#: ..\remote_feature.rst:33
msgid ""
"After cloning a repository you do not need to configure all remote branches "
"manually. Instead you can checkout the remote branch and choose to create a "
"local tracking branch."
msgstr ""

#: ..\remote_feature.rst:37
msgid "Create SSH key"
msgstr ""

#: ..\remote_feature.rst:39
msgid ""
"Git uses SSH for accessing private repositories. SSH uses a public/private "
"key pair for authentication. This means you need to generate a private key "
"and a public key. The private key is stored on your computer locally and the"
" public key can be given to anyone. SSH will encrypt whatever you send using"
" your secret private key. The receiver will then use the public key you send"
" to decrypt the data."
msgstr ""

#: ..\remote_feature.rst:44
msgid ""
"This encryption will not protect the data itself but it protects the "
"authenticity. Because the private key is only available to the sender, the "
"receiver can be sure about the origin of the data. In practise the key pair "
"is only used for the authentication process. The data itself will be "
"encrypted using a key that is exchanged during this initial phase."
msgstr ""

#: ..\remote_feature.rst:49
msgid "PuTTY and github"
msgstr ""

#: ..\remote_feature.rst:51
msgid ""
"PuTTY is SSH client that for Windows that is a bit more user friendly then "
"OpenSSH. Unfortunately PuTTY does not work with all servers. In this "
"paragraph I will show how to generate a key for github using putty."
msgstr ""

#: ..\remote_feature.rst:54
msgid ""
"First make sure GitExtensions is configured to use PuTTY and all paths are "
"correct."
msgstr ""

#: ..\remote_feature.rst:60
msgid "can choose ``Generate or import key`` to start the key generator."
msgstr ""

#: ..\remote_feature.rst:66
msgid ""
"PuTTY will ask you to move the mouse around to generate a more random key. "
"When the key is generated you can save the public and the private key in a "
"file. You can choose to protect the private key with a password but this is "
"not necessary."
msgstr ""

#: ..\remote_feature.rst:69
msgid ""
"Now you have a key pair you need to give github the public key. This can be "
"done in ``Account Settings`` in the tab ``SSH Public Keys``. You can add "
"multiple keys here, but you only need one key for all repositories."
msgstr ""

#: ..\remote_feature.rst:74
msgid ""
"After telling github what public key to use to decrypt, you need to tell "
"GitExtensions what private key to use to encrypt. In the clone dialog there "
"is a ``Load SSH key`` button to load the private key into the PuTTY "
"authentication agent. This can also be done manually by starting the PuTTY "
"authentication agent and choose ``add key`` in the context menu in the "
"system tray."
msgstr ""

#: ..\remote_feature.rst:80
msgid ""
"GitExtensions can load the private keys automatically for you when "
"communicating with a remote. You need to configure the private key for the "
"remote."
msgstr ""

#: ..\remote_feature.rst:83
msgid "This is done in the ``Manage remote repositories`` dialog."
msgstr ""

#: ..\remote_feature.rst:86
msgid "OpenSSH and github"
msgstr ""

#: ..\remote_feature.rst:88
msgid ""
"When you choose to use OpenSSH you need to configure GitExtensions as shown "
"in the screenshot below."
msgstr ""

#: ..\remote_feature.rst:92
msgid ""
"OpenSSH is the best SSH client there is but it lacks Windows support. "
"Therefore it is slightly more complex to use. Another drawback is that "
"GitExtensions cannot control OpenSSH and needs to show the command line "
"dialogs when OpenSSH might be used. GitExtensions will show the command line"
" window for every command that might require a SSH connection. For this "
"reason PuTTY is the prefered SSH client in GitExtensions."
msgstr ""

#: ..\remote_feature.rst:97
msgid ""
"To generate a key pair in OpenSSH you need to go to the command line. I "
"recommend to use the git bash because the path to OpenSSH is already set."
msgstr ""

#: ..\remote_feature.rst:102
msgid ""
"Type the following command: ``ssh-keygen -C \"your@email.com\" -t rsa`` Use "
"the same email address as the email address used in git. You will be asked "
"where if you want to protect the private key with a password. This is not "
"necessary. By default the public and private keys are stored in "
"``c:\\Documents and Settings\\[User]\\.ssh\\`` or "
"``c:\\Users\\[user]\\.ssh\\``."
msgstr ""

#: ..\remote_feature.rst:109
msgid ""
"You do not need to tell GitExtensions about the private key because OpenSSH "
"will load it for you. Now open the public key using notepad and copy the key"
" to github. This can be done in ``Account Settings`` in the tab ``SSH Public"
" Keys`` on `GitHub <http://www.github.com>`_."
msgstr ""

#: ..\remote_feature.rst:116
msgid "Pull changes"
msgstr ""

#: ..\remote_feature.rst:118
msgid ""
"You can get remote changes using the pull function. Before you can pull "
"remote changes you need to make sure there are no uncommitted changes in "
"your local repository. If you have uncommitted changes you should commit "
"them or stash them during the pull. You can read about how to use the stash "
"in the Stash chapter."
msgstr ""

#: ..\remote_feature.rst:124
msgid ""
"In order to get your personal repository up-to-date, you need to fetch "
"changes from a remote repository. You can do this using the ``Pull`` dialog."
" When the dialog starts the default remote for the current branch is set. "
"You can choose another remote or enter a custom url if you like. When the "
"remote branches configured correctly, you do not need to choose a remote "
"branch."
msgstr ""

#: ..\remote_feature.rst:128
msgid ""
"If you just fetch the commits from the remote repository and you already "
"committed some changes to your local repository, the commits will be in a "
"different branch. In the pull dialog this is illustrated in the image on the"
" left. This can be useful when you want to review the changes before you "
"want to merge them with your own changes."
msgstr ""

#: ..\remote_feature.rst:135
msgid ""
"When you choose to merge the remote branch after fetching the changes a "
"branch will be created, and will be merged youâ€™re your commit. Doing this "
"creates a lot of branches and merges, making the history harder to read."
msgstr ""

#: ..\remote_feature.rst:140
msgid ""
"Instead of merging the fetched commits with your local commits, you can also"
" choose to rebase your commits on top of the fetched commits. This is "
"illustrated on the left in the image below. A rebase will first undo your "
"local commits (c and d), then fetch the remote commits (e) and finally "
"recommit your local commits. When there is a merge conflict during the "
"rebase, the rebase dialog will show."
msgstr ""

#: ..\remote_feature.rst:147
msgid "Next to the pull button there are some buttons that can be useful:"
msgstr ""

#: ..\remote_feature.rst:150
msgid "Solve conflicts"
msgstr ""

#: ..\remote_feature.rst:150
msgid ""
"When there are merge conflicts, you can solve them by pressing this button."
msgstr ""

#: ..\remote_feature.rst:152
msgid "Stash changes"
msgstr ""

#: ..\remote_feature.rst:152
msgid ""
"When the working dir contains uncommitted changes, you need to stash them "
"before pulling."
msgstr ""

#: ..\remote_feature.rst:154
msgid "Auto stash"
msgstr ""

#: ..\remote_feature.rst:154
msgid ""
"Check this checkbox if you want to stash before pulling. The stash will be "
"reapplied after pulling."
msgstr ""

#: ..\remote_feature.rst:156
msgid "Load SSH key"
msgstr ""

#: ..\remote_feature.rst:156
msgid ""
"This button is only available when you use PuTTY as SSH client. You can "
"press this button to load the key configured for the remote. If no key is "
"set, a dialog will prompt for the key."
msgstr ""

#: ..\remote_feature.rst:161
msgid "Push changes"
msgstr ""

#: ..\remote_feature.rst:163
msgid ""
"In the browse window you can check if there are local commits that are not "
"pushed to a remote repository yet. In the image below the green labels mark "
"the position of the master branch on the remote repository. The red label "
"marks the position of the master branch on the local repository. The local "
"repository is ahead three commits."
msgstr ""

#: ..\remote_feature.rst:169
msgid "To push the changes press ``Push`` in the toolbar."
msgstr ""

#: ..\remote_feature.rst:173
msgid ""
"The push dialog allows you to choose the remote repository to push to. The "
"remote repository is set to the remote of the current branch. You can choose"
" another remote or choose a url to push to. You can also specify a branch to"
" push."
msgstr ""

#: ..\remote_feature.rst:178
msgid ""
"Tags are not pushed to the remote repository. If you want to push a tag you "
"need to open the ``Tags`` tab in the dialog. You can choose to push a singe "
"tag or all tags. No commits will be pushed when the ``Tags`` tab is "
"selected, only tags."
msgstr ""

#: ..\remote_feature.rst:181
msgid ""
"You can not merge your changes in the remote repository. Merging must be "
"done locally. This means that you cannot push your changes before the "
"commits are merged locally. In practice you need to pull before you can push"
" most of the times."
msgstr ""
