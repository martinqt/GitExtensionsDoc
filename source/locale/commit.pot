# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GitExtensions 2.48\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 23:16+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\commit.rst:2
msgid "Commit"
msgstr ""

#: ..\commit.rst:4
msgid "A commit is a set of changes with some extra information. Every commit contains the follow information:"
msgstr ""

#: ..\commit.rst:6
msgid "Changes"
msgstr ""

#: ..\commit.rst:7
msgid "Committer name and email"
msgstr ""

#: ..\commit.rst:8
msgid "Commit date"
msgstr ""

#: ..\commit.rst:9
msgid "Commit message"
msgstr ""

#: ..\commit.rst:10
msgid "Cryptographically strong SHA1 hash"
msgstr ""

#: ..\commit.rst:12
msgid "Each commit creates a new revision of the source. Revisions are not tracked per file; each change creates a new revision of the complete source. Unlike most traditional source control management systems, revisions are not named using a revision number. Each revision is named using a SHA1, a 41 long characters cryptographically strong hash."
msgstr ""

#: ..\commit.rst:17
msgid "Commit changes"
msgstr ""

#: ..\commit.rst:19
msgid "Changes can be committed to the local repository. Unlike most other source control management systems you do not need to checkout files before you start editing. You can just start editing files, and review all the changes you made in the commit dialog later. When you open the commit dialog, all changes are listed in the top-left."
msgstr ""

#: ..\commit.rst:25
msgid "There are three kinds of changes:"
msgstr ""

#: ..\commit.rst:28
msgid "Untracked"
msgstr ""

#: ..\commit.rst:28
msgid "This file is not yet tracked by Git. This is probably a new file, or a file that has not been committed to Git before."
msgstr ""

#: ..\commit.rst:31
msgid "Modified"
msgstr ""

#: ..\commit.rst:31
msgid "This file is modified since the last commit."
msgstr ""

#: ..\commit.rst:33
msgid "Deleted"
msgstr ""

#: ..\commit.rst:33
msgid "This file has been deleted."
msgstr ""

#: ..\commit.rst:36
msgid "When you rename or move a file Git will notice that this file has been moved, but currently Git Extensions does not show this in the commit dialog."
msgstr ""

#: ..\commit.rst:39
msgid "During your initial commit there are probably lots of files you do not want to be tracked. You can ignore these files by not staging them, but they will show every time. You can instead add them to the ``.gitignore`` file of your repository. Files that are in the ``.gitignore`` file will not show up in the commit dialog again. You can open the ``.gitignore`` editor from the menu ``Working dir changes`` by selecting ``Edit ignored files``."
msgstr ""

#: ..\commit.rst:46
msgid "Making a commit is a two step procedure:"
msgstr ""

#: ..\commit.rst:48
msgid "Staging the changes to be committed, which saves a snapshot of the changes into the Git \"index\"."
msgstr ""

#: ..\commit.rst:49
msgid "Committing those staged changes, which records the staged changes and other information into the repository."
msgstr ""

#: ..\commit.rst:51
msgid "You do not have to commit immediately after staging changes. You can close the commit dialog, make further changes to the files in the working dir, then re-open the commit dialog to stage further changes and commit. Changes that you have staged previously will still be staged when you re-open the dialog."
msgstr ""

#: ..\commit.rst:56
msgid "Staging changes"
msgstr ""

#: ..\commit.rst:58
msgid "The changes that you have made to your working directory are not automatically included in a commit. You must choose which of the changed files, or individual changes from within those files, will be included in the commit by \"staging\" the changes in Git Extensions. Staging changes in Git Extensions is the same as using ``git add`` on the Git command line."
msgstr ""

#: ..\commit.rst:62
msgid "You can stage the changes you want to commit by selecting the files in the top-left or \"Unstaged changes\" pane and pressing the ``Stage`` button or pressing the ``[S]`` key. The file entries will move to the lower left or \"Staged changes\" pane. You need to stage deleted files because you stage the change and not the file. If you have staged changes from a file and you wish to exclude those changes from the commit, select the entry in the staged changes pane and press the ``Unstage`` button or press the ``[U]`` key."
msgstr ""

#: ..\commit.rst:68
msgid "If the file that is selected in either the unstaged or staged changes pane is text format, Git Extensions will show a Git \"diff\" view in the right side pane of the window."
msgstr ""

#: ..\commit.rst:72
msgid "Staging selected lines"
msgstr ""

#: ..\commit.rst:74
msgid "You do not have to commit all of the changes in a text format file in one commit. You can select and stage individual lines from within a file such that only the chosen lines will be included in your next commit; the remaining changes in the file will appear as unstaged changes for the next commit."
msgstr ""

#: ..\commit.rst:78
msgid "In the diff view on the right, select the line or lines that you want to stage then right-click and choose ``Stage selected line(s)`` or press the ``[S]`` key. The file will now appear in both the staged changes and unstaged changes panes on the left since now there are both staged and unstaged changes in the same file. The change that was selected will disappear from the diff view on the right because the diff view is showing only the unstaged changes."
msgstr ""

#: ..\commit.rst:83
msgid "To see the line changes that have been staged select the entry for the file in the staged changes pane. To unstage selected changed lines from a file, select that file in the staged changes pane, then select the line or lines in the diff view, right -click, and choose ``Unstage selected line(s)`` or press the ``[U]`` key."
msgstr ""

#: ..\commit.rst:87
msgid "If you select an entire line including the end-of-line character then staging or unstaging that line will include both the selected line and the next line. To select a single line to stage or unstage you may simply click onto the line without selecting any particular characters."
msgstr ""

#: ..\commit.rst:91
msgid "Staging and unstaging individual lines from a file does not change the file itself. It is simply choosing which changes from within that file will be included in the next commit."
msgstr ""

#: ..\commit.rst:95
msgid "Undoing or resetting changes"
msgstr ""

#: ..\commit.rst:97
msgid "You can undo or reset changes to files from the commit dialog. You can only do this from the top-left or \"Unstaged changes\" pane. If you have already staged the changes then you must first unstage them as described above. To reset the changes in a file, select the file in the unstaged changes pane, right-click and choose ``Reset file or directory changes`` or press the ``[R]`` key."
msgstr ""

#: ..\commit.rst:104
msgid "You can reset individual changed lines in a similar way to staging and unstaging individual lines, which are described above. To reset an individual line, select the line or lines in the diff view on the right then right-click and choose ``Reset selected lines`` or press the ``[R]`` key."
msgstr ""

#: ..\commit.rst:108
msgid "Resetting changes modifies the file, discarding either all of the changes or the changes on the selected lines."
msgstr ""

#: ..\commit.rst:111
msgid "Making the commit"
msgstr ""

#: ..\commit.rst:113
msgid "When all the changes you want to commit are staged, enter a commit message into the lower-right pane and press the commit button."
msgstr ""

#: ..\commit.rst:117
msgid "It is also possible to add changes to your last commit by checking the ``Amend Commit`` checkbox. This can be very useful when you forgot some changes. This function rewrites history; it deletes the last commit and commits it again including the added changes. Make sure you only use ``Amend Commit`` when the commit is not yet published to a remote repository."
msgstr ""

#: ..\commit.rst:121
msgid "There is a built-in spelling checker that checks the commit message. Incorrectly spelled words are underlined with a wavey red line. Right-click on the misspelled word to choose the correct spelling or choose one of the other options."
msgstr ""

#: ..\commit.rst:126
msgid "Git Extensions installs a number of dictionaries by default. You can choose another language in the context menu of the spelling checker or in the settings dialog. To add a new spelling dictionary add the dictionary file to the ``Dictionaries`` folder inside the Git Extensions installation folder."
msgstr ""

#: ..\commit.rst:133
msgid "Cherry pick commit"
msgstr ""

#: ..\commit.rst:135
msgid "A commit can be recommitted by using the cherry pick function. This can be very useful when you want to make the same change on multiple branches."
msgstr ""

#: ..\commit.rst:141
msgid "Revert commit"
msgstr ""

#: ..\commit.rst:143
msgid "A commit cannot be deleted once it is published. If you need to undo the changes made in a commit, you need to create a new commit that undoes the changes. This is called a revert commit."
msgstr ""

#: ..\commit.rst:149
msgid "Stash changes"
msgstr ""

#: ..\commit.rst:151
msgid "If there are local changes that you do not want to commit yet and not want to throw away either, you can temporarily stash them. This is useful when working on a feature and you need to start working on something else for a few hours. You can stash changes away and then reapply them to your working dir again later. Stashes are typically used for very short periods."
msgstr ""

#: ..\commit.rst:157
msgid "You can create multiple stashes if needed. Stashes are shown in the commit log with the text ``[stash]``."
msgstr ""

#: ..\commit.rst:161
msgid "The stash is especially useful when pulling remote changes into a dirty working directory. If you want a more permanent stash, you should create a branch."
msgstr ""

